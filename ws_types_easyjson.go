// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package hyperliquid

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson8df87204DecodeGithubComSoniricoGoHyperliquid(in *jlexer.Lexer, out *wsMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "channel":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Channel = string(in.String())
			}
		case "data":
			if in.IsNull() {
				in.Skip()
			} else {
				if data := in.Raw(); in.Ok() {
					in.AddError((out.Data).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8df87204EncodeGithubComSoniricoGoHyperliquid(out *jwriter.Writer, in wsMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"channel\":"
		out.RawString(prefix[1:])
		out.String(string(in.Channel))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		out.Raw((in.Data).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v wsMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v wsMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *wsMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *wsMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid(l, v)
}
func easyjson8df87204DecodeGithubComSoniricoGoHyperliquid1(in *jlexer.Lexer, out *wsCommand) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "method":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Method = string(in.String())
			}
		case "subscription":
			if m, ok := out.Subscription.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Subscription.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Subscription = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8df87204EncodeGithubComSoniricoGoHyperliquid1(out *jwriter.Writer, in wsCommand) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"method\":"
		out.RawString(prefix[1:])
		out.String(string(in.Method))
	}
	if in.Subscription != nil {
		const prefix string = ",\"subscription\":"
		out.RawString(prefix)
		if m, ok := in.Subscription.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Subscription.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Subscription))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v wsCommand) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v wsCommand) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *wsCommand) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *wsCommand) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid1(l, v)
}
func easyjson8df87204DecodeGithubComSoniricoGoHyperliquid2(in *jlexer.Lexer, out *WsOrderFills) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "isSnapshot":
			if in.IsNull() {
				in.Skip()
			} else {
				out.IsSnapshot = bool(in.Bool())
			}
		case "user":
			if in.IsNull() {
				in.Skip()
			} else {
				out.User = string(in.String())
			}
		case "fills":
			if in.IsNull() {
				in.Skip()
				out.Fills = nil
			} else {
				in.Delim('[')
				if out.Fills == nil {
					if !in.IsDelim(']') {
						out.Fills = make([]WsOrderFill, 0, 0)
					} else {
						out.Fills = []WsOrderFill{}
					}
				} else {
					out.Fills = (out.Fills)[:0]
				}
				for !in.IsDelim(']') {
					var v1 WsOrderFill
					if in.IsNull() {
						in.Skip()
					} else {
						(v1).UnmarshalEasyJSON(in)
					}
					out.Fills = append(out.Fills, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8df87204EncodeGithubComSoniricoGoHyperliquid2(out *jwriter.Writer, in WsOrderFills) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"isSnapshot\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.IsSnapshot))
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	{
		const prefix string = ",\"fills\":"
		out.RawString(prefix)
		if in.Fills == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Fills {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsOrderFills) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsOrderFills) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsOrderFills) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsOrderFills) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid2(l, v)
}
func easyjson8df87204DecodeGithubComSoniricoGoHyperliquid3(in *jlexer.Lexer, out *WsOrderFill) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "coin":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Coin = string(in.String())
			}
		case "px":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Px = string(in.String())
			}
		case "sz":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Sz = string(in.String())
			}
		case "side":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Side = string(in.String())
			}
		case "time":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Time = int64(in.Int64())
			}
		case "startPosition":
			if in.IsNull() {
				in.Skip()
			} else {
				out.StartPosition = string(in.String())
			}
		case "dir":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Dir = string(in.String())
			}
		case "closedPnl":
			if in.IsNull() {
				in.Skip()
			} else {
				out.ClosedPnl = string(in.String())
			}
		case "hash":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Hash = string(in.String())
			}
		case "oid":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Oid = int64(in.Int64())
			}
		case "crossed":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Crossed = bool(in.Bool())
			}
		case "fee":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Fee = string(in.String())
			}
		case "tid":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Tid = int64(in.Int64())
			}
		case "liquidation":
			if in.IsNull() {
				in.Skip()
				out.Liquidation = nil
			} else {
				if out.Liquidation == nil {
					out.Liquidation = new(FillLiquidation)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					(*out.Liquidation).UnmarshalEasyJSON(in)
				}
			}
		case "feeToken":
			if in.IsNull() {
				in.Skip()
			} else {
				out.FeeToken = string(in.String())
			}
		case "builderFee":
			if in.IsNull() {
				in.Skip()
				out.BuilderFee = nil
			} else {
				if out.BuilderFee == nil {
					out.BuilderFee = new(string)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					*out.BuilderFee = string(in.String())
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8df87204EncodeGithubComSoniricoGoHyperliquid3(out *jwriter.Writer, in WsOrderFill) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"coin\":"
		out.RawString(prefix[1:])
		out.String(string(in.Coin))
	}
	{
		const prefix string = ",\"px\":"
		out.RawString(prefix)
		out.String(string(in.Px))
	}
	{
		const prefix string = ",\"sz\":"
		out.RawString(prefix)
		out.String(string(in.Sz))
	}
	{
		const prefix string = ",\"side\":"
		out.RawString(prefix)
		out.String(string(in.Side))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"startPosition\":"
		out.RawString(prefix)
		out.String(string(in.StartPosition))
	}
	{
		const prefix string = ",\"dir\":"
		out.RawString(prefix)
		out.String(string(in.Dir))
	}
	{
		const prefix string = ",\"closedPnl\":"
		out.RawString(prefix)
		out.String(string(in.ClosedPnl))
	}
	{
		const prefix string = ",\"hash\":"
		out.RawString(prefix)
		out.String(string(in.Hash))
	}
	{
		const prefix string = ",\"oid\":"
		out.RawString(prefix)
		out.Int64(int64(in.Oid))
	}
	{
		const prefix string = ",\"crossed\":"
		out.RawString(prefix)
		out.Bool(bool(in.Crossed))
	}
	{
		const prefix string = ",\"fee\":"
		out.RawString(prefix)
		out.String(string(in.Fee))
	}
	{
		const prefix string = ",\"tid\":"
		out.RawString(prefix)
		out.Int64(int64(in.Tid))
	}
	if in.Liquidation != nil {
		const prefix string = ",\"liquidation\":"
		out.RawString(prefix)
		(*in.Liquidation).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"feeToken\":"
		out.RawString(prefix)
		out.String(string(in.FeeToken))
	}
	if in.BuilderFee != nil {
		const prefix string = ",\"builderFee\":"
		out.RawString(prefix)
		out.String(string(*in.BuilderFee))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsOrderFill) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsOrderFill) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsOrderFill) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsOrderFill) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid3(l, v)
}
func easyjson8df87204DecodeGithubComSoniricoGoHyperliquid4(in *jlexer.Lexer, out *WsOrder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "order":
			if in.IsNull() {
				in.Skip()
			} else {
				(out.Order).UnmarshalEasyJSON(in)
			}
		case "status":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Status = string(in.String())
			}
		case "statusTimestamp":
			if in.IsNull() {
				in.Skip()
			} else {
				out.StatusTimestamp = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8df87204EncodeGithubComSoniricoGoHyperliquid4(out *jwriter.Writer, in WsOrder) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"order\":"
		out.RawString(prefix[1:])
		(in.Order).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"statusTimestamp\":"
		out.RawString(prefix)
		out.Int64(int64(in.StatusTimestamp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsOrder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsOrder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsOrder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsOrder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid4(l, v)
}
func easyjson8df87204DecodeGithubComSoniricoGoHyperliquid5(in *jlexer.Lexer, out *WsBasicOrder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "coin":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Coin = string(in.String())
			}
		case "side":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Side = string(in.String())
			}
		case "limitPx":
			if in.IsNull() {
				in.Skip()
			} else {
				out.LimitPx = string(in.String())
			}
		case "sz":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Sz = string(in.String())
			}
		case "oid":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Oid = int64(in.Int64())
			}
		case "timestamp":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Timestamp = int64(in.Int64())
			}
		case "origSz":
			if in.IsNull() {
				in.Skip()
			} else {
				out.OrigSz = string(in.String())
			}
		case "cloid":
			if in.IsNull() {
				in.Skip()
				out.Cloid = nil
			} else {
				if out.Cloid == nil {
					out.Cloid = new(string)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					*out.Cloid = string(in.String())
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8df87204EncodeGithubComSoniricoGoHyperliquid5(out *jwriter.Writer, in WsBasicOrder) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"coin\":"
		out.RawString(prefix[1:])
		out.String(string(in.Coin))
	}
	{
		const prefix string = ",\"side\":"
		out.RawString(prefix)
		out.String(string(in.Side))
	}
	{
		const prefix string = ",\"limitPx\":"
		out.RawString(prefix)
		out.String(string(in.LimitPx))
	}
	{
		const prefix string = ",\"sz\":"
		out.RawString(prefix)
		out.String(string(in.Sz))
	}
	{
		const prefix string = ",\"oid\":"
		out.RawString(prefix)
		out.Int64(int64(in.Oid))
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Timestamp))
	}
	{
		const prefix string = ",\"origSz\":"
		out.RawString(prefix)
		out.String(string(in.OrigSz))
	}
	{
		const prefix string = ",\"cloid\":"
		out.RawString(prefix)
		if in.Cloid == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Cloid))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsBasicOrder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsBasicOrder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsBasicOrder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsBasicOrder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid5(l, v)
}
func easyjson8df87204DecodeGithubComSoniricoGoHyperliquid6(in *jlexer.Lexer, out *WebData2MarginTier) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "lowerBound":
			if in.IsNull() {
				in.Skip()
			} else {
				out.LowerBound = string(in.String())
			}
		case "maxLeverage":
			if in.IsNull() {
				in.Skip()
			} else {
				out.MaxLeverage = int(in.Int())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8df87204EncodeGithubComSoniricoGoHyperliquid6(out *jwriter.Writer, in WebData2MarginTier) {
	out.RawByte('{')
	first := true
	_ = first
	if in.LowerBound != "" {
		const prefix string = ",\"lowerBound\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.LowerBound))
	}
	if in.MaxLeverage != 0 {
		const prefix string = ",\"maxLeverage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MaxLeverage))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WebData2MarginTier) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WebData2MarginTier) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WebData2MarginTier) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WebData2MarginTier) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid6(l, v)
}
func easyjson8df87204DecodeGithubComSoniricoGoHyperliquid7(in *jlexer.Lexer, out *WebData2MarginTable) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "description":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Description = string(in.String())
			}
		case "marginTiers":
			if in.IsNull() {
				in.Skip()
				out.MarginTiers = nil
			} else {
				in.Delim('[')
				if out.MarginTiers == nil {
					if !in.IsDelim(']') {
						out.MarginTiers = make([]WebData2MarginTier, 0, 2)
					} else {
						out.MarginTiers = []WebData2MarginTier{}
					}
				} else {
					out.MarginTiers = (out.MarginTiers)[:0]
				}
				for !in.IsDelim(']') {
					var v4 WebData2MarginTier
					if in.IsNull() {
						in.Skip()
					} else {
						(v4).UnmarshalEasyJSON(in)
					}
					out.MarginTiers = append(out.MarginTiers, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8df87204EncodeGithubComSoniricoGoHyperliquid7(out *jwriter.Writer, in WebData2MarginTable) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Description != "" {
		const prefix string = ",\"description\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Description))
	}
	if len(in.MarginTiers) != 0 {
		const prefix string = ",\"marginTiers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.MarginTiers {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WebData2MarginTable) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WebData2MarginTable) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WebData2MarginTable) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WebData2MarginTable) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid7(l, v)
}
func easyjson8df87204DecodeGithubComSoniricoGoHyperliquid8(in *jlexer.Lexer, out *WebData2AssetInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "szDecimals":
			if in.IsNull() {
				in.Skip()
			} else {
				out.SzDecimals = int(in.Int())
			}
		case "name":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Name = string(in.String())
			}
		case "maxLeverage":
			if in.IsNull() {
				in.Skip()
			} else {
				out.MaxLeverage = int(in.Int())
			}
		case "marginTableId":
			if in.IsNull() {
				in.Skip()
			} else {
				out.MarginTableID = int(in.Int())
			}
		case "isDelisted":
			if in.IsNull() {
				in.Skip()
			} else {
				out.IsDelisted = bool(in.Bool())
			}
		case "onlyIsolated":
			if in.IsNull() {
				in.Skip()
			} else {
				out.OnlyIsolated = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8df87204EncodeGithubComSoniricoGoHyperliquid8(out *jwriter.Writer, in WebData2AssetInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.SzDecimals != 0 {
		const prefix string = ",\"szDecimals\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.SzDecimals))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.MaxLeverage != 0 {
		const prefix string = ",\"maxLeverage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MaxLeverage))
	}
	if in.MarginTableID != 0 {
		const prefix string = ",\"marginTableId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MarginTableID))
	}
	if in.IsDelisted {
		const prefix string = ",\"isDelisted\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsDelisted))
	}
	if in.OnlyIsolated {
		const prefix string = ",\"onlyIsolated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.OnlyIsolated))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WebData2AssetInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WebData2AssetInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WebData2AssetInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WebData2AssetInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid8(l, v)
}
func easyjson8df87204DecodeGithubComSoniricoGoHyperliquid9(in *jlexer.Lexer, out *Trade) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "coin":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Coin = string(in.String())
			}
		case "side":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Side = string(in.String())
			}
		case "px":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Px = string(in.String())
			}
		case "sz":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Sz = string(in.String())
			}
		case "time":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Time = int64(in.Int64())
			}
		case "hash":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Hash = string(in.String())
			}
		case "tid":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Tid = int64(in.Int64())
			}
		case "users":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make([]string, 0, 4)
					} else {
						out.Users = []string{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					if in.IsNull() {
						in.Skip()
					} else {
						v7 = string(in.String())
					}
					out.Users = append(out.Users, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8df87204EncodeGithubComSoniricoGoHyperliquid9(out *jwriter.Writer, in Trade) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"coin\":"
		out.RawString(prefix[1:])
		out.String(string(in.Coin))
	}
	{
		const prefix string = ",\"side\":"
		out.RawString(prefix)
		out.String(string(in.Side))
	}
	{
		const prefix string = ",\"px\":"
		out.RawString(prefix)
		out.String(string(in.Px))
	}
	{
		const prefix string = ",\"sz\":"
		out.RawString(prefix)
		out.String(string(in.Sz))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"hash\":"
		out.RawString(prefix)
		out.String(string(in.Hash))
	}
	{
		const prefix string = ",\"tid\":"
		out.RawString(prefix)
		out.Int64(int64(in.Tid))
	}
	{
		const prefix string = ",\"users\":"
		out.RawString(prefix)
		if in.Users == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Users {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Trade) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Trade) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Trade) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Trade) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid9(l, v)
}
func easyjson8df87204DecodeGithubComSoniricoGoHyperliquid10(in *jlexer.Lexer, out *SpotState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "balances":
			if in.IsNull() {
				in.Skip()
				out.Balances = nil
			} else {
				in.Delim('[')
				if out.Balances == nil {
					if !in.IsDelim(']') {
						out.Balances = make([]SpotBalance, 0, 0)
					} else {
						out.Balances = []SpotBalance{}
					}
				} else {
					out.Balances = (out.Balances)[:0]
				}
				for !in.IsDelim(']') {
					var v10 SpotBalance
					if in.IsNull() {
						in.Skip()
					} else {
						(v10).UnmarshalEasyJSON(in)
					}
					out.Balances = append(out.Balances, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8df87204EncodeGithubComSoniricoGoHyperliquid10(out *jwriter.Writer, in SpotState) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Balances) != 0 {
		const prefix string = ",\"balances\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v11, v12 := range in.Balances {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SpotState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SpotState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SpotState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SpotState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid10(l, v)
}
func easyjson8df87204DecodeGithubComSoniricoGoHyperliquid11(in *jlexer.Lexer, out *Notification) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "notification":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Notification = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8df87204EncodeGithubComSoniricoGoHyperliquid11(out *jwriter.Writer, in Notification) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"notification\":"
		out.RawString(prefix[1:])
		out.String(string(in.Notification))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Notification) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Notification) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Notification) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Notification) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid11(l, v)
}
func easyjson8df87204DecodeGithubComSoniricoGoHyperliquid12(in *jlexer.Lexer, out *Level) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "n":
			if in.IsNull() {
				in.Skip()
			} else {
				out.N = int(in.Int())
			}
		case "px":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Px = float64(in.Float64Str())
			}
		case "sz":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Sz = float64(in.Float64Str())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8df87204EncodeGithubComSoniricoGoHyperliquid12(out *jwriter.Writer, in Level) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"n\":"
		out.RawString(prefix[1:])
		out.Int(int(in.N))
	}
	{
		const prefix string = ",\"px\":"
		out.RawString(prefix)
		out.Float64Str(float64(in.Px))
	}
	{
		const prefix string = ",\"sz\":"
		out.RawString(prefix)
		out.Float64Str(float64(in.Sz))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Level) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Level) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Level) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Level) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid12(l, v)
}
func easyjson8df87204DecodeGithubComSoniricoGoHyperliquid13(in *jlexer.Lexer, out *L2Book) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "coin":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Coin = string(in.String())
			}
		case "levels":
			if in.IsNull() {
				in.Skip()
				out.Levels = nil
			} else {
				in.Delim('[')
				if out.Levels == nil {
					if !in.IsDelim(']') {
						out.Levels = make([][]Level, 0, 2)
					} else {
						out.Levels = [][]Level{}
					}
				} else {
					out.Levels = (out.Levels)[:0]
				}
				for !in.IsDelim(']') {
					var v13 []Level
					if in.IsNull() {
						in.Skip()
						v13 = nil
					} else {
						in.Delim('[')
						if v13 == nil {
							if !in.IsDelim(']') {
								v13 = make([]Level, 0, 2)
							} else {
								v13 = []Level{}
							}
						} else {
							v13 = (v13)[:0]
						}
						for !in.IsDelim(']') {
							var v14 Level
							if in.IsNull() {
								in.Skip()
							} else {
								(v14).UnmarshalEasyJSON(in)
							}
							v13 = append(v13, v14)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Levels = append(out.Levels, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "time":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Time = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8df87204EncodeGithubComSoniricoGoHyperliquid13(out *jwriter.Writer, in L2Book) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"coin\":"
		out.RawString(prefix[1:])
		out.String(string(in.Coin))
	}
	{
		const prefix string = ",\"levels\":"
		out.RawString(prefix)
		if in.Levels == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.Levels {
				if v15 > 0 {
					out.RawByte(',')
				}
				if v16 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v17, v18 := range v16 {
						if v17 > 0 {
							out.RawByte(',')
						}
						(v18).MarshalEasyJSON(out)
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v L2Book) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v L2Book) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *L2Book) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *L2Book) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid13(l, v)
}
func easyjson8df87204DecodeGithubComSoniricoGoHyperliquid14(in *jlexer.Lexer, out *FillLiquidation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "liquidatedUser":
			if in.IsNull() {
				in.Skip()
				out.LiquidatedUser = nil
			} else {
				if out.LiquidatedUser == nil {
					out.LiquidatedUser = new(string)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					*out.LiquidatedUser = string(in.String())
				}
			}
		case "markPx":
			if in.IsNull() {
				in.Skip()
			} else {
				out.MarkPx = string(in.String())
			}
		case "method":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Method = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8df87204EncodeGithubComSoniricoGoHyperliquid14(out *jwriter.Writer, in FillLiquidation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.LiquidatedUser != nil {
		const prefix string = ",\"liquidatedUser\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(*in.LiquidatedUser))
	}
	{
		const prefix string = ",\"markPx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MarkPx))
	}
	{
		const prefix string = ",\"method\":"
		out.RawString(prefix)
		out.String(string(in.Method))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FillLiquidation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FillLiquidation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FillLiquidation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FillLiquidation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid14(l, v)
}
func easyjson8df87204DecodeGithubComSoniricoGoHyperliquid15(in *jlexer.Lexer, out *ClearinghouseState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "marginSummary":
			if in.IsNull() {
				in.Skip()
				out.MarginSummary = nil
			} else {
				if out.MarginSummary == nil {
					out.MarginSummary = new(MarginSummary)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					(*out.MarginSummary).UnmarshalEasyJSON(in)
				}
			}
		case "crossMarginSummary":
			if in.IsNull() {
				in.Skip()
				out.CrossMarginSummary = nil
			} else {
				if out.CrossMarginSummary == nil {
					out.CrossMarginSummary = new(MarginSummary)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					(*out.CrossMarginSummary).UnmarshalEasyJSON(in)
				}
			}
		case "crossMaintenanceMarginUsed":
			if in.IsNull() {
				in.Skip()
			} else {
				out.CrossMaintenanceMarginUsed = string(in.String())
			}
		case "withdrawable":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Withdrawable = string(in.String())
			}
		case "assetPositions":
			if in.IsNull() {
				in.Skip()
				out.AssetPositions = nil
			} else {
				in.Delim('[')
				if out.AssetPositions == nil {
					if !in.IsDelim(']') {
						out.AssetPositions = make([]AssetPosition, 0, 0)
					} else {
						out.AssetPositions = []AssetPosition{}
					}
				} else {
					out.AssetPositions = (out.AssetPositions)[:0]
				}
				for !in.IsDelim(']') {
					var v19 AssetPosition
					if in.IsNull() {
						in.Skip()
					} else {
						(v19).UnmarshalEasyJSON(in)
					}
					out.AssetPositions = append(out.AssetPositions, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "time":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Time = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8df87204EncodeGithubComSoniricoGoHyperliquid15(out *jwriter.Writer, in ClearinghouseState) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MarginSummary != nil {
		const prefix string = ",\"marginSummary\":"
		first = false
		out.RawString(prefix[1:])
		(*in.MarginSummary).MarshalEasyJSON(out)
	}
	if in.CrossMarginSummary != nil {
		const prefix string = ",\"crossMarginSummary\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.CrossMarginSummary).MarshalEasyJSON(out)
	}
	if in.CrossMaintenanceMarginUsed != "" {
		const prefix string = ",\"crossMaintenanceMarginUsed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CrossMaintenanceMarginUsed))
	}
	if in.Withdrawable != "" {
		const prefix string = ",\"withdrawable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Withdrawable))
	}
	if len(in.AssetPositions) != 0 {
		const prefix string = ",\"assetPositions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v20, v21 := range in.AssetPositions {
				if v20 > 0 {
					out.RawByte(',')
				}
				(v21).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Time != 0 {
		const prefix string = ",\"time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Time))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClearinghouseState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClearinghouseState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClearinghouseState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClearinghouseState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid15(l, v)
}
func easyjson8df87204DecodeGithubComSoniricoGoHyperliquid16(in *jlexer.Lexer, out *Candle) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "T":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Timestamp = int64(in.Int64())
			}
		case "c":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Close = string(in.String())
			}
		case "h":
			if in.IsNull() {
				in.Skip()
			} else {
				out.High = string(in.String())
			}
		case "i":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Interval = string(in.String())
			}
		case "l":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Low = string(in.String())
			}
		case "n":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Number = int(in.Int())
			}
		case "o":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Open = string(in.String())
			}
		case "s":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Symbol = string(in.String())
			}
		case "t":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Time = int64(in.Int64())
			}
		case "v":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Volume = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8df87204EncodeGithubComSoniricoGoHyperliquid16(out *jwriter.Writer, in Candle) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"T\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Timestamp))
	}
	{
		const prefix string = ",\"c\":"
		out.RawString(prefix)
		out.String(string(in.Close))
	}
	{
		const prefix string = ",\"h\":"
		out.RawString(prefix)
		out.String(string(in.High))
	}
	{
		const prefix string = ",\"i\":"
		out.RawString(prefix)
		out.String(string(in.Interval))
	}
	{
		const prefix string = ",\"l\":"
		out.RawString(prefix)
		out.String(string(in.Low))
	}
	{
		const prefix string = ",\"n\":"
		out.RawString(prefix)
		out.Int(int(in.Number))
	}
	{
		const prefix string = ",\"o\":"
		out.RawString(prefix)
		out.String(string(in.Open))
	}
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"t\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"v\":"
		out.RawString(prefix)
		out.String(string(in.Volume))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Candle) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Candle) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Candle) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Candle) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid16(l, v)
}
func easyjson8df87204DecodeGithubComSoniricoGoHyperliquid17(in *jlexer.Lexer, out *Bbo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "coin":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Coin = string(in.String())
			}
		case "time":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Time = int64(in.Int64())
			}
		case "bbo":
			if in.IsNull() {
				in.Skip()
				out.Bbo = nil
			} else {
				in.Delim('[')
				if out.Bbo == nil {
					if !in.IsDelim(']') {
						out.Bbo = make([]Level, 0, 2)
					} else {
						out.Bbo = []Level{}
					}
				} else {
					out.Bbo = (out.Bbo)[:0]
				}
				for !in.IsDelim(']') {
					var v22 Level
					if in.IsNull() {
						in.Skip()
					} else {
						(v22).UnmarshalEasyJSON(in)
					}
					out.Bbo = append(out.Bbo, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8df87204EncodeGithubComSoniricoGoHyperliquid17(out *jwriter.Writer, in Bbo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"coin\":"
		out.RawString(prefix[1:])
		out.String(string(in.Coin))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"bbo\":"
		out.RawString(prefix)
		if in.Bbo == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Bbo {
				if v23 > 0 {
					out.RawByte(',')
				}
				(v24).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Bbo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Bbo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Bbo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Bbo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid17(l, v)
}
func easyjson8df87204DecodeGithubComSoniricoGoHyperliquid18(in *jlexer.Lexer, out *AllMids) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "mids":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Mids = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v25 string
					if in.IsNull() {
						in.Skip()
					} else {
						v25 = string(in.String())
					}
					(out.Mids)[key] = v25
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8df87204EncodeGithubComSoniricoGoHyperliquid18(out *jwriter.Writer, in AllMids) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"mids\":"
		out.RawString(prefix[1:])
		if in.Mids == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v26First := true
			for v26Name, v26Value := range in.Mids {
				if v26First {
					v26First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v26Name))
				out.RawByte(':')
				out.String(string(v26Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AllMids) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AllMids) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AllMids) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AllMids) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid18(l, v)
}
